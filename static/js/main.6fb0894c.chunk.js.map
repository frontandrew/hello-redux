{"version":3,"sources":["modules/reduser.js","modules/actions.js","components/counter/counter.js","components/app/app.js","index.js"],"names":["reduser","state","action","type","payload","inc","rnd","value","Math","floor","random","dec","connect","counter","actions","className","onClick","App","console","log","store","createStore","subscribe","getState","ReactDOM","render","document","querySelector"],"mappings":"2TA6BeA,EArBC,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAGtC,OAAQA,EAAOC,MACb,IAAK,MACH,OAAOF,EAAQ,EAEjB,IAAK,MAIH,OAAOA,EAAQC,EAAOE,QAExB,IAAK,MACH,OAAOH,EAAQ,EAEjB,QACE,OAAOA,ICnBAI,EAAM,iBAAO,CAAEF,KAAM,QACrBG,EAAM,WACjB,IAAMC,EAAQC,KAAKC,MAAsB,GAAhBD,KAAKE,UAG9B,MAAO,CACLP,KAAM,MACNC,QAJcI,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkB,GAAKH,EAAQA,IAOpDI,EAAM,iBAAO,CAAER,KAAM,QC2CnBS,G,MAAAA,aApBS,SAACX,GACvB,MAAO,CACLY,QAASZ,KAkBoDa,EAAlDF,EAnDC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASR,EAAoB,EAApBA,IAAKM,EAAe,EAAfA,IAAKL,EAAU,EAAVA,IACpC,OACE,yBAAKS,UAAU,qBACb,0BAAMA,UAAU,iCAAhB,eACA,wBAAIA,UAAU,kBAAd,YACA,wBAAIA,UAAU,kBAAkBF,GAChC,yBAAKE,UAAU,+BACb,4BACEC,QAASL,EACTI,UAAU,8BAFZ,OAKA,4BACEC,QAASV,EACTS,UAAU,8BAFZ,OAKA,4BACEC,QAASX,EACTU,UAAU,8BAFZ,aCjBOE,EAJH,WACV,OAAO,kBAAC,EAAD,OCITC,QAAQC,IAAI,eAGZ,IAAMC,EAAQC,YAAYrB,GAW1BoB,EAAME,WAAU,WACdJ,QAAQC,IAAIC,EAAMG,eAUpBC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,cAAc,W","file":"static/js/main.6fb0894c.chunk.js","sourcesContent":["/**Reduser получает на вход состояние state и указание\r\n * как нужно это state изменить - action.\r\n * \r\n * Reduser возвращает новый state.\r\n * \r\n * Если state undefind нужно вернуть initialState, \r\n * или state по умолчанию - в данном случае 0.\r\n*/\r\nconst reduser = (state = 69, action) => {\r\n\r\n  /**В зависимости от аction reduser возвращает измененный state */\r\n  switch (action.type) {\r\n    case 'INC':\r\n      return state + 1;\r\n\r\n    case 'RND':\r\n      /**Обьект action может иметь в себе дополнительные значения, \r\n       * кроме action.type, необходимые для действий со state.\r\n       */\r\n      return state + action.payload;\r\n\r\n    case 'DEC':\r\n      return state - 1;\r\n    /**Если action неизвестен, вернуть текущий state без изменений */\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reduser;","/**{ type: 'INC' } - это action - обычный JS обьект,\r\n* обязательно имеет поле type (тип действия, которое\r\n* нужно совершить над state)\r\n*\r\n* Создание action можно вынести в отдельную функцию.\r\n*/\r\nexport const inc = () => ({ type: 'INC' });\r\nexport const rnd = () => {\r\n  const value = Math.floor(Math.random() * 10);\r\n  const payload = Math.floor(Math.random() * 10) <= 4 ? -value : value;\r\n\r\n  return {\r\n    type: 'RND',\r\n    payload: payload\r\n  }\r\n};\r\nexport const dec = () => ({ type: 'DEC' });\r\n\r\n/**Action в качестве дополнительных параметров может\r\n * иметь дополнительные поля обьекта.\r\n */","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport * as actions from '../../modules/actions';\r\n\r\nimport './counter.css'\r\n\r\nconst Counter = ({ counter, inc, dec, rnd }) => {\r\n  return (\r\n    <div className=\"counter jumbotron\">\r\n      <span className=\"counter__tag badge badge-dark\">React+Redux</span>\r\n      <h1 className=\"counter__title\">Counter:</h1>\r\n      <h2 className=\"counter__count\">{counter}</h2>\r\n      <div className=\"counter__controls btn-group\">\r\n        <button\r\n          onClick={dec}\r\n          className=\"dec btn btn-primary btn-lg\">\r\n          DEC\r\n        </button>\r\n        <button\r\n          onClick={rnd}\r\n          className=\"rnd btn btn-primary btn-lg\">\r\n          RND\r\n        </button>\r\n        <button\r\n          onClick={inc}\r\n          className=\"inc btn btn-primary btn-lg\">\r\n          INC\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**mapStateToProps получает нужные параметры из state, для того\r\n * что бы в внутри функции connect передать их в качестве props\r\n * целевому react-компоненту (в данном случае <Counter />).\r\n */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    counter: state\r\n  }\r\n}\r\n\r\n/**mapDispatchToProps оборачивает actions в dispatch (который доступен\r\n * внутри функции connect), и предает их в таком виде в целевой компонент\r\n * в качестве props.\r\n * \r\n */\r\n// const mapDispatchToProps = (dispatch) => bindActionCreators(actions, dispatch);\r\n\r\n/**Функция connect - компонент высшего порядка. Она имеет доступ\r\n * к store. При помощи connect компоненты ниже по иерархии могут\r\n * получать доступ к store, и через него к state.\r\n * \r\n * Вместо mapDispathTOProps можно вторым аргументом передать обьект с\r\n * actions и функция connect сама обернет их в dispatch\r\n */\r\nexport default connect(mapStateToProps, /* mapDispatchToProps */ actions)(Counter);","import React from 'react';\r\n\r\nimport Counter from '../counter/counter';\r\n\r\nconst App = () => {\r\n  return <Counter />\r\n}\r\n\r\nexport default App;","import { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport reduser from './modules/reduser';\r\n\r\nimport App from './components/app/app';\r\n\r\nconsole.log('Hello Redux');\r\n\r\n/**Инициализация store. Инициализирует state. */\r\nconst store = createStore(reduser);\r\n// const { dispatch } = store;\r\n\r\n/**Обернем actions в dispatch при помощи bindActionCreators */\r\n// const { inc, dec, rnd } = bindActionCreators(actions, dispatch)\r\n/**Dispatch принимает action и передает его в Reduser\r\n * вместе с текущим State. Reduser в зависимости от action\r\n * изменяет state. Таким образом Dispatch приводит к изменению state.\r\n */\r\n\r\n/**Subscribe выполняется после каждого изменения state */\r\nstore.subscribe(() => {\r\n  console.log(store.getState())\r\n})\r\n\r\n/**Компонент Provider ('react-redux') передает store в <App /> как контекст,\r\n * таким образом store можно получать на любом уровне в <App />.\r\n * \r\n * Provider следит за обновлениями store(и state), и обноляет своих children\r\n * автоматически. Поэтому функция update и subscribe больше не требуются \r\n*/\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('.root'));\r\n\r\n\r\n/** Теперь за обновление компонентов после изменения состояния\r\n * следит компонент Provider.\r\n *\r\n * Update вызывает перерисовку ReactDOM, после каждого изменения state.\r\n * \r\n  const update = () => {\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.querySelector('.root'));\r\n}\r\n\r\n/**В превый раз update() вызывается вручную, чтобы отрисовать ReactDOM\r\n * с первоначальным state\r\n\r\nupdate();\r\n\r\n/**В дальнейшем ReactDOM будет обновляться при помощи subscribe, тк\r\n * Subscribe выполняется после каждого изменения state\r\n\r\nstore.subscribe(update);\r\n\r\n*/"],"sourceRoot":""}