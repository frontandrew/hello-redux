{"version":3,"sources":["modules/actions.js","modules/reduser.js","components/counter/counter.js","index.js"],"names":["inc","type","rnd","payload","dec","reduser","state","action","Counter","counter","className","onClick","console","log","store","createStore","dispatch","bindActionCreators","actions","subscribe","getState","update","ReactDOM","render","value","Math","floor","random","document","querySelector"],"mappings":"oTAMaA,EAAM,iBAAO,CAAEC,KAAM,QACrBC,EAAM,SAACC,GAAD,MAAc,CAAEF,KAAM,MAAOE,YACnCC,EAAM,iBAAO,CAAEH,KAAM,QCkBnBI,EAlBC,WAAwB,IAAvBC,EAAsB,uDAAd,EAAGC,EAAW,uCAGrC,OAAQA,EAAON,MACb,IAAK,MACH,OAAOK,EAAQ,EAEjB,IAAK,MACH,OAAOA,EAAQC,EAAOJ,QAExB,IAAK,MACH,OAAOG,EAAQ,EAEjB,QACE,OAAOA,ICSEE,G,MA3BC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAAST,EAAoB,EAApBA,IAAKI,EAAe,EAAfA,IAAKF,EAAU,EAAVA,IACpC,OACE,yBAAKQ,UAAU,qBACb,0BAAMA,UAAU,gBAAhB,eACA,wBAAIA,UAAU,kBAAd,YACA,wBAAIA,UAAU,kBAAkBD,GAChC,yBAAKC,UAAU,+BACb,4BACEC,QAASP,EACTM,UAAU,8BAFZ,OAKA,4BACEC,QAAST,EACTQ,UAAU,8BAFZ,OAKA,4BACEC,QAASX,EACTU,UAAU,8BAFZ,WCZRE,QAAQC,IAAI,eAGZ,IAAMC,EAAQC,YAAYV,GAClBW,EAAaF,EAAbE,S,EAGkBC,YAAmBC,EAASF,GAA9ChB,E,EAAAA,IAAKI,E,EAAAA,IAAKF,E,EAAAA,IAOlBY,EAAMK,WAAU,WACdP,QAAQC,IAAIC,EAAMM,eAIpB,IAAMC,EAAS,WACbC,IAASC,OACP,kBAAC,EAAD,CACEvB,IAAKA,EACLI,IAAKA,EACLF,IAAK,WACH,IAAMsB,EAAQC,KAAKC,MAAsB,GAAhBD,KAAKE,UACxBxB,EAAUsB,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkB,GAAKH,EAAQA,EAK/DtB,EAAIC,IAENM,QAASK,EAAMM,aACjBQ,SAASC,cAAc,WAO3BR,IAKAP,EAAMK,UAAUE,I","file":"static/js/main.8a0bd79e.chunk.js","sourcesContent":["/**{ type: 'INC' } - это action - обычный JS обьект,\r\n* обязательно имеет поле type (тип действия, которое\r\n* нужно совершить над state)\r\n*\r\n* Создание action можно вынести в отдельную функцию.\r\n*/\r\nexport const inc = () => ({ type: 'INC' });\r\nexport const rnd = (payload) => ({ type: 'RND', payload });\r\nexport const dec = () => ({ type: 'DEC' });\r\n\r\n/**Action в качестве дополнительных параметров может\r\n * получать дополнительные поля обьекта.\r\n */","/**Reduser получает на вход состояние state и указание\r\n * как нужно это state изменить - action.\r\n * \r\n * Reduser возвращает новый state.\r\n * \r\n * Если state undefind нужно вернуть initialState, \r\n * или state по умолчанию - в данном случае 0.\r\n*/\r\nconst reduser = (state = 0, action) => {\r\n\r\n  /**В зависимости от аction reduser возвращает измененный state */\r\n  switch (action.type) {\r\n    case 'INC':\r\n      return state + 1;\r\n\r\n    case 'RND':\r\n      return state + action.payload;\r\n\r\n    case 'DEC':\r\n      return state - 1;\r\n    /**Если action неизвестен, вернуть текущий state без изменений */\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reduser;","import React from 'react';\r\n\r\nimport './counter.css'\r\n\r\nconst Counter = ({ counter, inc, dec, rnd }) => {\r\n  return (\r\n    <div className=\"counter jumbotron\">\r\n      <span className=\"counter__tag\">React+Redux</span>\r\n      <h1 className=\"counter__title\">Counter:</h1>\r\n      <h2 className=\"counter__count\">{counter}</h2>\r\n      <div className=\"counter__controls btn-group\">\r\n        <button\r\n          onClick={dec}\r\n          className=\"dec btn btn-primary btn-lg\">\r\n          DEC\r\n        </button>\r\n        <button\r\n          onClick={rnd}\r\n          className=\"rnd btn btn-primary btn-lg\">\r\n          RND\r\n        </button>\r\n        <button\r\n          onClick={inc}\r\n          className=\"inc btn btn-primary btn-lg\">\r\n          INC\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;","import { createStore, bindActionCreators } from 'redux';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as actions from './modules/actions';\r\nimport reduser from './modules/reduser';\r\n\r\nimport Counter from './components/counter/counter';\r\n\r\nconsole.log('Hello Redux');\r\n\r\n/**Инициализация store. Инициализирует state. */\r\nconst store = createStore(reduser);\r\nconst { dispatch } = store;\r\n\r\n/**Обернем actions в dispatch при помощи bindActionCreators */\r\nconst { inc, dec, rnd } = bindActionCreators(actions, dispatch)\r\n/**Dispatch принимает action и передает его в Reduser\r\n * вместе с текущим State. Reduser в зависимости от action\r\n * изменяет state. Таким образом Dispatch приводит к изменению state.\r\n */\r\n\r\n/**Subscribe выполняется после каждого изменения state */\r\nstore.subscribe(() => {\r\n  console.log(store.getState())\r\n})\r\n\r\n/**Update вызывает перерисовку ReactDOM, после каждого изменения state */\r\nconst update = () => {\r\n  ReactDOM.render(\r\n    <Counter\r\n      inc={inc}\r\n      dec={dec}\r\n      rnd={() => {\r\n        const value = Math.floor(Math.random() * 10);\r\n        const payload = Math.floor(Math.random() * 10) <= 4 ? -value : value;\r\n\r\n        /**Action в качестве дополнительных параметров может\r\n         * получать дополнительные поля обьекта.\r\n         */\r\n        rnd(payload);\r\n      }}\r\n      counter={store.getState()} />,\r\n    document.querySelector('.root')\r\n  );\r\n}\r\n\r\n/**В превый раз update() вызывается вручную, чтобы отрисовать ReactDOM\r\n * с первоначальным state\r\n */\r\nupdate();\r\n\r\n/**В дальнейшем ReactDOM будет обновляться при помощи subscribe, тк\r\n * Subscribe выполняется после каждого изменения state \r\n */\r\nstore.subscribe(update);\r\n\r\n"],"sourceRoot":""}